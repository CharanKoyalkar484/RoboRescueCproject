/*!
 *  \brief     Class containing all logic of the simulateMap class.
 *  \details   The simulateMap class simulates a lidarscan as if it was executed in an urban environment.
 *  \author    Danny Horvath - 1634676
 *  \author    Thomas Fink - 1634907
 *  \version   1.0
 *  \date      15-04-2015
 */

#ifndef SIMULATEMAP_H
#define SIMULATEMAP_H
#include "map.h"
#include "PointCloud.h"
#include "checkpoint.h"

class Map;

class SimulateMap
{
private:
    //! X Coordinates of the lidar.
    int lidarX = 0;
    //! Y Coordinates of the lidar.
    int lidarY = 0;
    //! Vector containing all checkpoints.
    std::vector<checkPoint> checkpoints;
    //! Pointer to a map object containing the information of the map.
    Map *map;
    //! PointCloud object where the results of the scan will be saved in.
    Pointcloud pC;
public:
    /*!
    *   The simulateMap constructor for an existing Map.
    *   \brief Create a simulateMap object from an existing map given a map pointer.
    *   @param map: the vector containing the map
    */
    SimulateMap(Map *map);
    /*!
    *   Perform a simulation on the given Map.
    *   \brief Detect all objects around the lidar and return a string containing the results.
    *    @return String containing the found objects for the GUI to display.
    */
    std::string simulate();
    /*!
    *   Set the scanpoint(the point where the lidar is located)
    *   \brief Set the scanpoint of the Lidar, the point from where the scan starts.
    *   @param x,y ints containing the x and y position for where you want the lidar to be at.
    */
    void setScanPoint(int y, int x);
    /*!
    *  Add checkpoints to the checkpoint vector.
    *  Add new checkpoints to the vector for simulation.
    *   @param x,y the x and y coordinates of the given checkpoint
    */
    void addCheckPoint(int x, int y);
    /*!
    *  Remove checkpoints from the checkpoint vector.
    *  Remove new checkpoints from the vector for simulation.
    *   @param x,y the x and y coordinates of the given checkpoint
    */
    void deleteCheckPoint(int x, int y);
    /*!
    *   Returns the pointcloud produced by the simulation.
    *   \brief Returns the pointcloud generated by the simulation this pointcloud contains x and y coordinates of found objects.
    *   @return Pointcloud object containing the detected objects.
    */
    Pointcloud getPointCloud();
    /*!
    *   Default destructor of simulate map
    *   \brief The default destructor of simulate map
    */
    ~SimulateMap();
};

#endif // SIMULATEMAP_H
