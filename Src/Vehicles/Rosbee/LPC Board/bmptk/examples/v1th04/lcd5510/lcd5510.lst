	.cpu cortex-m0
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 4
	.eabi_attribute 34, 0
	.eabi_attribute 18, 4
	.code	16
	.file	"lcd5510.c"
	.section	.text.sce_set,"ax",%progbits
	.align	1
	.global	sce_set
	.code	16
	.thumb_func
	.type	sce_set, %function
sce_set:
	ldr	r3, .L5
	cmp	r0, #0
	beq	.L2
	mov	r2, #1
	neg	r2, r2
	str	r2, [r3]
	b	.L1
.L2:
	str	r0, [r3]
.L1:
	@ sp needed
	bx	lr
.L6:
	.align	2
.L5:
	.word	1342242820
	.size	sce_set, .-sce_set
	.section	.text.res_set,"ax",%progbits
	.align	1
	.global	res_set
	.code	16
	.thumb_func
	.type	res_set, %function
res_set:
	ldr	r3, .L10
	cmp	r0, #0
	beq	.L8
	mov	r2, #1
	neg	r2, r2
	str	r2, [r3]
	b	.L7
.L8:
	str	r0, [r3]
.L7:
	@ sp needed
	bx	lr
.L11:
	.align	2
.L10:
	.word	1342242824
	.size	res_set, .-res_set
	.section	.text.dc_set,"ax",%progbits
	.align	1
	.global	dc_set
	.code	16
	.thumb_func
	.type	dc_set, %function
dc_set:
	ldr	r3, .L15
	cmp	r0, #0
	beq	.L13
	mov	r2, #1
	neg	r2, r2
	str	r2, [r3]
	b	.L12
.L13:
	str	r0, [r3]
.L12:
	@ sp needed
	bx	lr
.L16:
	.align	2
.L15:
	.word	1342242832
	.size	dc_set, .-dc_set
	.section	.text.sdin_set,"ax",%progbits
	.align	1
	.global	sdin_set
	.code	16
	.thumb_func
	.type	sdin_set, %function
sdin_set:
	ldr	r3, .L20
	cmp	r0, #0
	beq	.L18
	mov	r2, #1
	neg	r2, r2
	str	r2, [r3]
	b	.L17
.L18:
	str	r0, [r3]
.L17:
	@ sp needed
	bx	lr
.L21:
	.align	2
.L20:
	.word	1342242848
	.size	sdin_set, .-sdin_set
	.section	.text.sclk_set,"ax",%progbits
	.align	1
	.global	sclk_set
	.code	16
	.thumb_func
	.type	sclk_set, %function
sclk_set:
	ldr	r3, .L25
	cmp	r0, #0
	beq	.L23
	mov	r2, #1
	neg	r2, r2
	str	r2, [r3]
	b	.L22
.L23:
	str	r0, [r3]
.L22:
	@ sp needed
	bx	lr
.L26:
	.align	2
.L25:
	.word	1342242880
	.size	sclk_set, .-sclk_set
	.section	.text.wait,"ax",%progbits
	.align	1
	.global	wait
	.code	16
	.thumb_func
	.type	wait, %function
wait:
	push	{r4, lr}
	mov	r4, r0
	bl	now
	add	r0, r0, r4
	bl	await
	@ sp needed
	pop	{r4, pc}
	.size	wait, .-wait
	.section	.text.lcd5510_send_byte,"ax",%progbits
	.align	1
	.global	lcd5510_send_byte
	.code	16
	.thumb_func
	.type	lcd5510_send_byte, %function
lcd5510_send_byte:
	push	{r3, r4, r5, lr}
	mov	r5, r0
	mov	r4, #8
.L30:
	mov	r3, #127
	mov	r0, r5
	bic	r0, r3
	bl	sdin_set
	ldr	r3, .L31
	mov	r2, #1
	neg	r2, r2
	str	r2, [r3]
	lsl	r5, r5, #1
	mov	r2, #0
	sub	r4, r4, #1
	uxtb	r5, r5
	str	r2, [r3]
	cmp	r4, r2
	bne	.L30
	@ sp needed
	pop	{r3, r4, r5, pc}
.L32:
	.align	2
.L31:
	.word	1342242880
	.size	lcd5510_send_byte, .-lcd5510_send_byte
	.section	.text.lcd5510_command,"ax",%progbits
	.align	1
	.global	lcd5510_command
	.code	16
	.thumb_func
	.type	lcd5510_command, %function
lcd5510_command:
	push	{r4, lr}
	ldr	r2, .L34
	ldr	r4, .L34+4
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4]
	bl	lcd5510_send_byte
	mov	r3, #1
	neg	r3, r3
	str	r3, [r4]
	@ sp needed
	pop	{r4, pc}
.L35:
	.align	2
.L34:
	.word	1342242832
	.word	1342242820
	.size	lcd5510_command, .-lcd5510_command
	.section	.text.lcd5510_data,"ax",%progbits
	.align	1
	.global	lcd5510_data
	.code	16
	.thumb_func
	.type	lcd5510_data, %function
lcd5510_data:
	push	{r3, r4, r5, lr}
	ldr	r3, .L37
	mov	r5, #1
	neg	r5, r5
	ldr	r4, .L37+4
	str	r5, [r3]
	mov	r3, #0
	str	r3, [r4]
	bl	lcd5510_send_byte
	@ sp needed
	str	r5, [r4]
	pop	{r3, r4, r5, pc}
.L38:
	.align	2
.L37:
	.word	1342242832
	.word	1342242820
	.size	lcd5510_data, .-lcd5510_data
	.section	.text.lcd5510_pixels,"ax",%progbits
	.align	1
	.global	lcd5510_pixels
	.code	16
	.thumb_func
	.type	lcd5510_pixels, %function
lcd5510_pixels:
	push	{r3, r4, r5, lr}
	mov	r3, #128
	orr	r0, r3
	mov	r5, r1
	mov	r4, r2
	bl	lcd5510_command
	mov	r0, #64
	orr	r0, r5
	bl	lcd5510_command
	mov	r0, r4
	bl	lcd5510_data
	@ sp needed
	pop	{r3, r4, r5, pc}
	.size	lcd5510_pixels, .-lcd5510_pixels
	.section	.text.configure_this_pin_as_gpio,"ax",%progbits
	.align	1
	.global	configure_this_pin_as_gpio
	.code	16
	.thumb_func
	.type	configure_this_pin_as_gpio, %function
configure_this_pin_as_gpio:
	ldr	r3, .L41
	push	{r4, lr}
	mov	r2, #128
	ldr	r4, [r3, #124]
	lsl	r2, r2, #9
	orr	r2, r4
	str	r2, [r3, #124]
	ldr	r2, [r0]
	mov	r4, #7
	bic	r2, r4
	orr	r1, r2
	str	r1, [r0]
	ldr	r1, [r3, #124]
	ldr	r2, .L41+4
	@ sp needed
	and	r2, r1
	str	r2, [r3, #124]
	pop	{r4, pc}
.L42:
	.align	2
.L41:
	.word	1074036740
	.word	-65537
	.size	configure_this_pin_as_gpio, .-configure_this_pin_as_gpio
	.section	.text.lcd5510_init,"ax",%progbits
	.align	1
	.global	lcd5510_init
	.code	16
	.thumb_func
	.type	lcd5510_init, %function
lcd5510_init:
	push	{r4, r5, r6, lr}
	ldr	r0, .L44
	mov	r1, #1
	bl	configure_this_pin_as_gpio
	ldr	r0, .L44+4
	mov	r1, #1
	bl	configure_this_pin_as_gpio
	ldr	r0, .L44+8
	mov	r1, #1
	bl	configure_this_pin_as_gpio
	ldr	r0, .L44+12
	mov	r1, #1
	bl	configure_this_pin_as_gpio
	ldr	r0, .L44+16
	mov	r1, #0
	bl	configure_this_pin_as_gpio
	ldr	r2, .L44+20
	mov	r3, #128
	lsl	r3, r3, #8
	ldr	r1, [r2, r3]
	mov	r0, #31
	orr	r1, r0
	str	r1, [r2, r3]
	ldr	r3, .L44+24
	mov	r6, #0
	str	r6, [r3]
	mov	r0, #1
	mov	r1, #0
	bl	wait
	mov	r5, #1
	ldr	r3, .L44+28
	neg	r5, r5
	ldr	r4, .L44+32
	str	r5, [r3]
	mov	r0, #1
	mov	r1, #0
	bl	wait
	str	r6, [r4]
	mov	r0, #1
	mov	r1, #0
	bl	wait
	mov	r0, #1
	mov	r1, #0
	str	r5, [r4]
	bl	wait
	mov	r0, #33
	bl	lcd5510_command
	mov	r0, #200
	bl	lcd5510_command
	mov	r0, #6
	bl	lcd5510_command
	mov	r0, #19
	bl	lcd5510_command
	mov	r0, #32
	bl	lcd5510_command
	mov	r0, #12
	bl	lcd5510_command
	@ sp needed
	pop	{r4, r5, r6, pc}
.L45:
	.align	2
.L44:
	.word	1074020472
	.word	1074020476
	.word	1074020480
	.word	1074020496
	.word	1074020500
	.word	1342242816
	.word	1342242880
	.word	1342242820
	.word	1342242824
	.size	lcd5510_init, .-lcd5510_init
	.section	.text.lcd5510_write,"ax",%progbits
	.align	1
	.global	lcd5510_write
	.code	16
	.thumb_func
	.type	lcd5510_write, %function
lcd5510_write:
	push	{r3, r4, r5, lr}
	cmp	r0, #83
	bhi	.L46
	cmp	r1, #47
	bhi	.L46
	lsr	r5, r1, #3
	mov	r3, #84
	mul	r3, r5
	mov	r4, #7
	and	r1, r4
	mov	r4, #1
	lsl	r4, r4, r1
	mov	r1, r4
	add	r3, r3, r0
	ldr	r4, .L50
	cmp	r2, #0
	beq	.L48
	ldrb	r2, [r4, r3]
	orr	r1, r2
	strb	r1, [r4, r3]
	b	.L49
.L48:
	ldrb	r2, [r4, r3]
	bic	r2, r1
	strb	r2, [r4, r3]
.L49:
	uxtb	r0, r0
	uxtb	r1, r5
	ldrb	r2, [r4, r3]
	bl	lcd5510_pixels
.L46:
	@ sp needed
	pop	{r3, r4, r5, pc}
.L51:
	.align	2
.L50:
	.word	lcd5510_buf
	.size	lcd5510_write, .-lcd5510_write
	.section	.text.lcd5510_clear,"ax",%progbits
	.align	1
	.global	lcd5510_clear
	.code	16
	.thumb_func
	.type	lcd5510_clear, %function
lcd5510_clear:
	push	{r4, lr}
	mov	r0, #128
	bl	lcd5510_command
	mov	r0, #64
	bl	lcd5510_command
	mov	r4, #0
.L54:
	ldr	r3, .L55
	mov	r0, #0
	add	r3, r4, r3
	strb	r0, [r3]
	bl	lcd5510_data
	add	r4, r4, #1
	mov	r3, #252
	lsl	r3, r3, #1
	cmp	r4, r3
	bne	.L54
	@ sp needed
	pop	{r4, pc}
.L56:
	.align	2
.L55:
	.word	lcd5510_buf
	.size	lcd5510_clear, .-lcd5510_clear
	.section	.text.swap,"ax",%progbits
	.align	1
	.global	swap
	.code	16
	.thumb_func
	.type	swap, %function
swap:
	ldr	r3, [r0]
	ldr	r2, [r1]
	@ sp needed
	str	r2, [r0]
	str	r3, [r1]
	bx	lr
	.size	swap, .-swap
	.section	.text.abs,"ax",%progbits
	.align	1
	.global	abs
	.code	16
	.thumb_func
	.type	abs, %function
abs:
	asr	r3, r0, #31
	add	r0, r0, r3
	eor	r0, r3
	@ sp needed
	bx	lr
	.size	abs, .-abs
	.section	.text.lcd5510_line,"ax",%progbits
	.align	1
	.global	lcd5510_line
	.code	16
	.thumb_func
	.type	lcd5510_line, %function
lcd5510_line:
	push	{r4, r5, r6, r7, lr}
	sub	sp, sp, #28
	str	r2, [sp]
	add	r2, sp, #48
	ldrb	r2, [r2]
	ldr	r5, [sp]
	str	r2, [sp, #20]
	sub	r2, r3, r1
	asr	r7, r2, #31
	sub	r4, r5, r0
	add	r6, r2, r7
	eor	r6, r7
	asr	r5, r4, #31
	str	r6, [sp, #12]
	str	r3, [sp, #16]
	asr	r6, r6, #31
	add	r3, r4, r5
	eor	r3, r5
	mov	ip, r6
	ldr	r5, [sp, #12]
	lsr	r6, r3, #31
	mov	r7, ip
	cmp	r5, r3
	adc	r7, r7, r6
	str	r7, [sp, #12]
	cmp	r7, #0
	bne	.L68
	mov	r3, r2
	mov	r2, r4
	mov	r4, r3
	b	.L60
.L68:
	ldr	r6, [sp, #16]
	mov	r3, r0
	str	r6, [sp]
	mov	r0, r1
	mov	r1, r3
.L60:
	mov	r7, #1
	str	r7, [sp, #4]
	cmp	r2, #0
	bge	.L61
	neg	r3, r7
	neg	r2, r2
	str	r3, [sp, #4]
.L61:
	mov	r5, #1
	str	r5, [sp, #8]
	cmp	r4, #0
	bge	.L62
	neg	r3, r5
	neg	r4, r4
	str	r3, [sp, #8]
.L62:
	lsl	r4, r4, #1
	lsl	r7, r2, #1
	sub	r7, r4, r7
	str	r4, [sp, #16]
	mov	r5, r1
	add	r4, r7, r2
	mov	r6, r0
.L63:
	ldr	r2, [sp]
	cmp	r6, r2
	beq	.L72
	ldr	r2, [sp, #12]
	cmp	r2, #0
	beq	.L71
	mov	r1, r6
	mov	r0, r5
	b	.L64
.L71:
	mov	r1, r5
	mov	r0, r6
.L64:
	ldr	r2, [sp, #20]
	bl	lcd5510_write
	cmp	r4, #0
	ble	.L65
	ldr	r3, [sp, #8]
	add	r4, r4, r7
	add	r5, r5, r3
	b	.L66
.L65:
	ldr	r2, [sp, #16]
	add	r4, r4, r2
.L66:
	ldr	r3, [sp, #4]
	add	r6, r6, r3
	b	.L63
.L72:
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
	.size	lcd5510_line, .-lcd5510_line
	.comm	lcd5510_buf,504,1
	.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.3 20140228 (release) [ARM/embedded-4_8-branch revision 208322]"
